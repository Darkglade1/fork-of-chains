export const ArgType = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
  Unknown: "unknown",
  Actor: "actor",
  Company: "company",
  Item: "item",
} as const;

export type ArgType = (typeof ArgType)[keyof typeof ArgType];

export const Args_OneActor = [ArgType.Actor];

export type MacroName = keyof typeof MACROS_METADATA;

const INTERNAL: MacroMetadata = Object.freeze({ internal: true });

export namespace MacroUtil {
  function resolveMacroName(name: MacroName): MacroName {
    while (typeof MACROS_METADATA[name] === "string") {
      name = MACROS_METADATA[name] as MacroName;
    }
    return name;
  }

  export function getMetadata(name: MacroName): MacroMetadata | undefined {
    return MACROS_METADATA[resolveMacroName(name)] as MacroMetadata | undefined;
  }

  export function getAliases(name: MacroName) {
    name = resolveMacroName(name);
    return [
      name,
      ...(Object.keys(MACROS_METADATA) as MacroName[]).filter(
        (x) => MACROS_METADATA[x] === name,
      ),
    ];
  }

  export function generateDefinitionsForT3LTRaw() {
    return Object.fromEntries(
      objectKeys(MACROS_METADATA).flatMap((macroName) => {
        if (macroName in MACROS_METADATA_SUGARCUBE) {
          // don't export definitions for standard SugarCube macros
          return [];
        }

        const macroMeta = MacroUtil.getMetadata(macroName);

        const def: Omit<MacroMetadata, "info" | "args"> = {};
        if (macroMeta) {
          const { info, args, ...rest } = macroMeta;
          Object.assign(def, rest);
          def.description ??= info;
        }

        return [[macroName, def]];
      }),
    );
  }

  export function generateDefinitionsForT3LT() {
    const data = {
      _NOTE:
        "DO NOT EDIT MANUALLY - The macro definitions are automatically generated by copying the output of running: setup.MacroUtil.generateDefinitionsForT3LT",
      "sugarcube-2": {
        macros: generateDefinitionsForT3LTRaw(),
      },
    };

    return JSON.stringify(data, undefined, 2);
  }

  export function registerMetadata(
    macroName: string,
    def: MacroMetadata | string,
  ) {
    MACROS_METADATA[macroName as keyof typeof MACROS_METADATA] = def;
  }
}

export interface MacroMetadata {
  //
  // Properties supported by T3LT (the Twine 3 Language Tools extension)
  //
  /** Name of the macro (currently unused in code; the name of the object suffices for now.) */
  name?: string;
  /** Description of macro. Shown on hover. Supports markdown. */
  description?: string;
  /** If the macro is a container (i.e. requires a closing tag) or not. false by default. */
  container?: boolean;
  /** If the macro is a self-closable. Requires macro to be a container first. false by default. */
  selfClose?: boolean;
  /** If the macro has children, specify their names as an array (currently unused in code.) You still need to define the child macros as their own macro definitions. */
  children?: string | unknown[];
  /** If the macro is a child macro, specify the names of its parents as an array (currently unused in code.) */
  parents?: string[];
  /** If the macro is deprecated or not. false by default. */
  deprecated?: boolean;
  /** If the macro is deprecated, specify any alternatives to the macro as an array. */
  deprecatedSuggestions?: string[];
  /** Allows for macro argument validation. Read here for more information. */
  parameters?: object;
  /** Allows for declaring decorations to be displayed on that macro. Uses DecorationRenderOptions' fields. Requires definedMacroDecorations setting to be enabled. */
  decoration?: object;

  //
  // Custom properties
  //
  args?: null | ArgType[] | ArgType[][];
  info?: string;
  /** If set to true, Content Creator will disallow the macro in quest descriptions, etc. (e.g.: navigation) */
  internal?: boolean;
}

function defineMacrosMetadata() {
  return <K extends string>(map: {
    [k in K]: MacroMetadata | string | undefined;
  }) => map;
}

// The macros metadata map values can be:
//  - string: it's an alias to another macro
//  - undefined: will report "no info available"
//  - a MacroMetadata

const MACROS_METADATA_SUGARCUBE = defineMacrosMetadata()({
  //
  // Macros allowed in Content Creator
  //
  set: {
    info: "Sets the value of a variable",
    args: null,
  },
  unset: {
    info: "Clears the value of a variable",
    args: null,
  },
  run: {
    info: "Executes a javascript expression",
    args: null,
  },
  include: {
    info: "Renders the contents of the specified Twine passage",
    args: [ArgType.String],
  },
  print: {
    info: "Renders twee code stored in a variable",
    args: null,
  },
  "=": "print",
  "-": "print",

  button: {
    info: "Renders a button with the given text, executing the contained twee asynchronously when clicked",
    args: [ArgType.String],
  },
  link: {
    info: "Renders a link with the given text, executing the contained twee asynchronously when clicked",
    args: [ArgType.String],
  },

  if: {
    info: "Renders text/code conditionally depending on a condition",
    args: null,
  },
  else: "if",
  elseif: "if",

  switch: {
    info: "Renders text/code conditionally depending on the value of an expression",
    args: null,
  },
  case: "switch",
  default: "switch",

  for: {
    info: "Loops over the items of a list or an object",
    args: null,
  },
  continue: {
    info: 'Jumps to the next iteration of a "for" loop',
    args: [],
  },
  break: {
    info: 'Breaks out of a "for" loop',
    args: [],
  },

  addclass: {
    info: "Adds the CSS class(es) passed as second argument to the HTML elements matching the selector specified as first argument",
    args: [ArgType.String, ArgType.String],
  },
  removeclass: {
    info: "Removes the CSS class(es) passed as second argument from the HTML elements matching the selector specified as first argument",
    args: [ArgType.String, ArgType.String],
  },
  toggleclass: {
    info: "Toggles the CSS class(es) passed as second argument at the HTML elements matching the selector specified as first argument",
    args: [ArgType.String, ArgType.String],
  },

  replace: {
    info: "Replaces the content of the elements matching the specified selector, by a render of the twee code contained inside this macro call",
    args: [ArgType.String, ArgType.String],
  },

  //
  // Macros disallowed in Content Creator
  //
  nobr: undefined,
  capture: INTERNAL,
  remember: INTERNAL,
  forget: INTERNAL,
  script: INTERNAL,
  silently: INTERNAL,
  type: INTERNAL,
  display: INTERNAL,
  checkbox: INTERNAL,
  cycle: INTERNAL,
  listbox: INTERNAL,
  linkappend: INTERNAL,
  linkprepend: INTERNAL,
  linkreplace: INTERNAL,
  numberbox: INTERNAL,
  textbox: INTERNAL,
  radiobutton: INTERNAL,
  textarea: INTERNAL,
  click: INTERNAL,
  actions: INTERNAL,
  back: INTERNAL,
  return: INTERNAL,
  choice: INTERNAL,
  copy: INTERNAL,
  append: INTERNAL,
  prepend: INTERNAL,
  remove: INTERNAL,
  audio: INTERNAL,
  cacheaudio: INTERNAL,
  createaudiogroup: INTERNAL,
  createplaylist: INTERNAL,
  masteraudio: INTERNAL,
  playlist: INTERNAL,
  removeaudiogroup: INTERNAL,
  removeplaylist: INTERNAL,
  waitforaudio: INTERNAL,
  setplaylist: INTERNAL,
  stopallaudio: INTERNAL,
  goto: INTERNAL,
  repeat: INTERNAL,
  stop: INTERNAL,
  timed: INTERNAL,
  widget: INTERNAL,
});

const MACROS_METADATA = defineMacrosMetadata()({
  ...MACROS_METADATA_SUGARCUBE,

  ////////////////////////
  //  CUSTOM FOC MACROS //
  ////////////////////////

  // NOTE: Some macros are added automatically at runtime:
  //   - Pronouns (eg. "<<they _u>>")
  //   - Body parts (eg. "<<utorso _u>>", "<<utorsoall _u>>")

  // Articles
  a: {
    info: "Renders the correct article (<b>a/an</b>) for the specified word",
    args: [ArgType.String],
  },
  an: "a",
  A: "a",
  An: "a",

  // Utils
  image: {
    info: "Renders an image by the given path. Supports images embedded in the game code (e.g. trait icons)",
    args: [ArgType.String],
  },

  pronounload: {
    info: "Assigns to the variable passed as second parameter, an object containing the pronouns for the specified actor",
    args: [ArgType.Actor, ArgType.Unknown],
  },

  message: {
    info: 'Renders an "spoiler tag", i.e. a clickable link (text passed as first argument) that toggles the visibility of the contained code',
    args: [[ArgType.String], [ArgType.String, ArgType.String]],
    container: true,
  },

  // Messages / coloring

  exp: {
    info: "Renders a value stylized as a Friendship amount",
    args: [ArgType.Number],
  },
  friendship: {
    info: "Renders a value stylized as a Friendship amount",
    args: [ArgType.Number],
  },
  prestige: {
    info: "Renders a value stylized as a Prestige amount",
    args: [ArgType.Number],
  },
  money: {
    info: "Renders a value stylized as a money amount: green if positive, red if negative",
    args: [ArgType.Number],
  },
  moneyloss: {
    info: "Renders a value stylized as a money amount. Opposite of 'money' macro: red if positive, green if negative",
    args: [ArgType.Number],
  },
  successtext: {
    info: "Renders a green text",
    args: [ArgType.String],
  },
  successtextlite: {
    info: "Renders a light green text",
    args: [ArgType.String],
  },
  dangertext: {
    info: "Renders a red text",
    args: [ArgType.String],
  },
  dangertextlite: {
    info: "Renders a light red text",
    args: [ArgType.String],
  },
  warning: {
    info: "Renders a warning text",
    args: [ArgType.String],
  },

  // Entities rep's / names

  rep: {
    info: "Represents an actor or entity name along with small icons for busy/idle status, skill focuses, etc",
    args: [[ArgType.Actor], [ArgType.Company], [ArgType.Item]],
  },
  Rep: {
    info: "Bob / Alice / You",
    args: [ArgType.Actor],
  },
  repall: {},
  reps: {
    info: "Bob's / Alice's / your",
    args: [ArgType.Actor],
  },
  Reps: {
    info: "Bob's / Alice's / Your",
    args: [ArgType.Actor],
  },
  yourrep: {
    info: "your evil slaver Bob / you",
    args: [ArgType.Actor],
  },
  Yourrep: {
    info: "Your evil slaver Bob / You",
    args: [ArgType.Actor],
  },
  theslaver: {
    info: "the slaver / the slave / you",
    args: [ArgType.Actor],
  },
  Theslaver: {
    info: "The slaver / The slave / You",
    args: [ArgType.Actor],
  },
  therace: {
    info: "the neko / you",
    args: [ArgType.Actor],
  },
  Therace: {
    info: "The Neko / You",
    args: [ArgType.Actor],
  },
  nameof: {
    info: "Prints the name of the unit, in bold, without tooltips",
    args: [[ArgType.Actor], [ArgType.Company]],
  },
  name: {
    info: "Prints the name of the unit. Unlike &lt;&lt;rep&gt;&gt;, no tooltip is shown",
    args: [[ArgType.Actor], [ArgType.Company]],
  },

  // Units info

  levelof: {
    info: "Prints the level of the unit",
    args: [ArgType.Number],
  },
  titlelow: {
    info: 'Prints the title of the unit, e.g., "generalist"',
    args: Args_OneActor,
  },

  /* These should not be used: */
  titlefull: INTERNAL,
  bantertext: INTERNAL,
  tfriendtitle: INTERNAL,
  tfriendslave: INTERNAL,

  uequipslot: {
    info: "Prints the equipment worn on this slot. E.g., The drink spilled on your &lt;&lt;ueqeuipslot $unit.player 'legs'&gt;&gt;",
    args: [ArgType.Actor, ArgType.String],
  },

  ufriend: {
    info: "Print the friendship status between two units, e.g., friend, acquaintance, or rival",
    args: [ArgType.Actor, ArgType.Actor],
  },
  utheirrel: {
    info: "Print 'their relationship', e.g.: 'his friend' or 'her father'",
    args: [ArgType.Actor, ArgType.Actor],
  },
  unamerel: {
    info: "Print 'name's relationship', e.g.: 'Bob's sister' or 'Bob's friend'",
    args: [ArgType.Actor, ArgType.Actor],
  },

  ubody: {
    info: "Print 'muscular body' or 'furry body'",
    args: Args_OneActor,
  },
  ubodyall: {
    info: "Print 'muscular body covered with leather armor' or 'furry body covered in nothing'",
    args: Args_OneActor,
  },
  ucleavage: {
    info: "Print flat cleavage or pec cleavage",
    args: Args_OneActor,
  },
  ubreasts: {
    info: "Print 'giant breasts' or 'tiny breasts'",
    args: Args_OneActor,
  },
  ubreastsall: {
    info: "Print 'giant breasts with equipment' or 'tiny breasts with equipment'",
    args: Args_OneActor,
  },
  unipples: {
    info: "Print 'nipples'",
    args: Args_OneActor,
  },
  unipplesall: {
    info: "Print 'nipples with a piercing'",
    args: Args_OneActor,
  },
  uflavor: {
    info: "Print the bodypart full flavor text, if it has any. Example, &lt;&lt;uflavor $unit.player 'wings'&gt;&gt; will print the wing's flavor text if the unit has wings",
    args: [ArgType.Actor, ArgType.String],
  },
  uequipment: {
    info: "Print equipment description, e.g., 'bondage slutty armor' or 'valuable combat armor'",
    args: Args_OneActor,
  },
  ubantertraining: INTERNAL,
  uadjphys: {
    info: "Print a physical adjective, e.g., 'muscular'",
    args: Args_OneActor,
  },
  uadjper: {
    info: "Print a personality adjective, e.g., 'naughty'",
    args: Args_OneActor,
  },
  urace: {
    info: "Outputs the name of the actor's race",
    args: Args_OneActor,
  },
  uhomeland: {
    info: "Outputs the region homeland of the actor, e.g., Eastern Deserts or The Mist",
    args: Args_OneActor,
  },
  uweapon: {
    info: "Prints the unit's weapon, e.g., 'sword' or 'Excalibur'",
    args: Args_OneActor,
  },
  uaweapon: {
    info: "Prints the unit's weapon, with an article. E.g., 'a sword' or 'an axe'",
    args: Args_OneActor,
  },
  uadj: {
    info: "Prints an adjective from the unit, e.g., 'naughty' or 'tall'",
    args: Args_OneActor,
  },
  uadjgood: {
    info: "Prints a positive adjective of the unit, e.g., 'smart'",
    args: Args_OneActor,
  },
  uadjbad: {
    info: "Prints a negative adjective of the unit, e.g., 'stupid'",
    args: Args_OneActor,
  },
  uadv: {
    info: "Prints an adverb of the unit, e.g., 'calmly'",
    args: Args_OneActor,
  },
  uadvcare: {
    info: "Prints an adverb of the unit suitable for caring for a unit, e.g., 'gently, generously' but not `cruelly, violently`",
    args: Args_OneActor,
  },
  uadvabuse: {
    info: "Prints an adverb of the unit suitable for abusing / attacking a unit, e.g., 'violently, evilly' but not `kindly, generously`",
    args: Args_OneActor,
  },
  ustriptorso: {
    info: "Prints a sentence where the unit strips down from their upper body equipment, if any",
    args: Args_OneActor,
  },
  ustriplegs: {
    info: "Prints a sentence where the unit strips down from their lower body equipment, if any",
    args: Args_OneActor,
  },
  ustripanus: {
    info: "Prints a sentence where the unit pulls whatever is filling their anus, if any",
    args: Args_OneActor,
  },
  ustripgenital: {
    info: "Prints a sentence where the unit pulls whatever is filling their vagina or blocking their dildo, if any",
    args: Args_OneActor,
  },
  ustripvagina: {
    info: "Prints a sentence where the unit pulls whatever is filling their vagina, if any",
    args: Args_OneActor,
  },
  ustripdick: {
    info: "Prints a sentence where the unit pulls whatever equipped on their dick, if any",
    args: Args_OneActor,
  },
  ustripnipple: {
    info: "Prints a sentence where the unit pulls whatever equipped on their nipples, if any",
    args: Args_OneActor,
  },
  ustripmouth: {
    info: "Prints a sentence where the unit pulls whatever equipped on their mouth, if any",
    args: Args_OneActor,
  },
  uslaverstripall: {
    info: "Prints a sentence where the unit strips everything if any",
    args: Args_OneActor,
  },
  uyoustripanus: INTERNAL,
  upunishreason: {
    info: "Prints a half-sentence giving a reason for punishing unit. Example use: 'You punish Bob because &lt;&lt;upunishreason $g.bob&gt;&gt;'",
    args: Args_OneActor,
  },
  upraisenoun: {
    info: "Prints a praise-able noun of the actor. E.g., bravery, or handsomeness",
    args: Args_OneActor,
  },
  uinsultnoun: {
    info: "Prints a insult-able noun of the actor. E.g., foolishness, or stupidity",
    args: Args_OneActor,
  },
  uhobbyverb: {
    info: "Prints a verb about the unit's hobby. E.g., reminiscing about his past, or cooking",
    args: Args_OneActor,
  },
  ustripshirtand: {
    info: "E.g., 'strips his shirt and'. Returns empty string if not wearing shirt",
    args: Args_OneActor,
  },
  ustrippantsand: {
    info: "E.g., 'strips his pants and'. Returns empty string if not wearing pants",
    args: Args_OneActor,
  },
  ustripmouthand: {
    info: "E.g., 'unfasten his gag and'. Returns empty string if not wearing mouth",
    args: Args_OneActor,
  },
  ustripeyesand: {
    info: "E.g., 'removes his blindfold and'. Returns empty string if not wearing eyes",
    args: Args_OneActor,
  },
  ustripanusand: {
    info: "E.g., 'pull out his buttplug and'. Returns empty string if not wearing anus",
    args: Args_OneActor,
  },
  ustripgenitaland: {
    info: "E.g., 'unlock his chastity cage and'. Returns empty string if not wearing genital",
    args: Args_OneActor,
  },
  ustripequipmentand: {
    info: "E.g., 'strips his armor and'. Returns empty string if naked",
    args: Args_OneActor,
  },
  uneedrescue: {
    info: "Prints a sentence hinting that you ned to rescue unit with a Rescuer. Example: '&lt;&lt;uneedrescue $g.bob&gt;&gt;, before worse things happen'",
    args: Args_OneActor,
  },
  urescuenow: {
    info: "Prints a sentence hinting that you ned to rescue unit now. Example: '&lt;&lt;uneedrescue $g.bob&gt;&gt; at once'",
    args: Args_OneActor,
  },
  ubodyswap: {
    info: "Prints a sentence describing the transformations that the first unit undergoes to become the second unit",
    args: [ArgType.Actor, ArgType.Actor],
  },
  uinsultrape: {
    info: "Gives a speech where the first unit insults the second unit during a rape",
    args: [ArgType.Actor, ArgType.Actor],
  },
  unitcard: {
    info: "Prints the unit card of this unit",
    args: Args_OneActor,
  },
  upetwhine: {
    info: "Prints a full dialogue about a pet humanlike whining.",
    args: Args_OneActor,
  },
  unickname: {},
  unicknamebad: {},
  ugaggeddiscomfort: {},
  ustripverb: {},
  ucdick: {},
  ucnipples: {},
  uman: {},

  //
  // Others
  //

  font: { container: true },
  questimage: {},

  lore: {},
  lorecard: {},
  lorecardcompact: {},

  // TODO:
  missingunitquest: {},
  selecttrait: {},
  inyourbuilding: {},
  loadflavortext: {},
  favor: {},
  lovertextshort: {},
  topic: {},
  loadquests: {},
  loadbuildings: {},
  loadbuildingtemplates: {},
  loadcatcrit: {},
  loadcatdisaster: {},
  includereplace: {},
  printreplace: {},
  DisplayUnitGroup: {},

  //
  // Internal (not allowed)
  //

  opt: {
    internal: true,
    parents: ["choose"],
  },
  optif: {
    internal: true,
    parents: ["choose"],
  },
  choose: {
    internal: true,
    container: true,
  },
  worldmap: INTERNAL,
  dialogue: {
    container: true,
    internal: true,
  },
  attach: INTERNAL,
  setarticle: INTERNAL,
  icon: INTERNAL,
  await: INTERNAL,
  codeeditor: INTERNAL,
  foctimed: {
    container: true,
    internal: true,
  },
  foclink: {
    container: true,
    internal: true,
  },
  focbutton: {
    container: true,
    internal: true,
  },
  filterall: {
    container: true,
    internal: true,
  },
  focwidget: {
    container: true,
    internal: true,
  },
  focwidgetpayload: {
    container: true,
    internal: true,
  },
  focmove: INTERNAL,
  focreturn: INTERNAL,
  focgoto: INTERNAL,
  focsavestategoto: INTERNAL,
  gotowipehistory: INTERNAL,
  refreshable: {
    container: true,
    internal: true,
  },
  filterable: {
    container: true,
    internal: true,
  },
  filtertoolbarinternal: INTERNAL,
  "refreshable-refresh": INTERNAL,
  "onevent-callback": INTERNAL,
  onevent: {
    container: true,
    internal: true,
  },

  printtext: INTERNAL,
  costrelationshipwidget: INTERNAL,
  generatechar: INTERNAL,
  refreshgenerate: INTERNAL,
  twinehelptext: INTERNAL,
  MoneyDone: INTERNAL,
  ExpDone: INTERNAL,

  devlist: INTERNAL,
  devlistentry: INTERNAL,
  devmacroinfo: INTERNAL,
  devcodeeditorpreview: INTERNAL,
  devtoolreturnbutton: INTERNAL,
  devtoolchoosetitle: INTERNAL,
  devquestroles: INTERNAL,
  devactorall: INTERNAL,
  devactor: INTERNAL,
  devactordefault: INTERNAL,
  devgotoreturn: INTERNAL,
  devchoosequest: INTERNAL,
  devchooseopportunitylist: INTERNAL,
  devchooseopportunity: INTERNAL,
  devchooseactivity: INTERNAL,
  devchoosequestlist: INTERNAL,
  devroleaddunitgroup: INTERNAL,

  dtname: INTERNAL,
  dtquestpool: INTERNAL,
  dtrarity: INTERNAL,
  dtduration: INTERNAL,
  dtexpires: INTERNAL,
  dtdifficulty: INTERNAL,
  dttags: INTERNAL,
  dtactor: INTERNAL,
  dtcost: INTERNAL,
  dtrestriction: INTERNAL,
  dtrewardhelp: INTERNAL,
  dtfailurehelp: INTERNAL,
  dtexpireoutcome: INTERNAL,
  dtstoryhelp: INTERNAL,
  dtquestpoolchoose: INTERNAL,
  devchoosedifficulty: INTERNAL,
  dtraritychoose: INTERNAL,
  devroleaddcriteria: INTERNAL,
  dtprintmeta: INTERNAL,
  dtprinttitle: INTERNAL,
  dtprintauthor: INTERNAL,
  dtprinttags: INTERNAL,
  dtprintdeadlineweeks: INTERNAL,
  dtprintactors: INTERNAL,
  dtprintcosts: INTERNAL,
  dtprintdifficulty: INTERNAL,
  dtprintquestpool: INTERNAL,
  dtprintrestrictions: INTERNAL,
  dtprintexpirationoutcomes: INTERNAL,
  dtoutcome: INTERNAL,
  dtsavepassage: INTERNAL,
  dtloadpassagelink: INTERNAL,
  dtloadpassage: INTERNAL,
  dtauthor: INTERNAL,
  dtprintoutcomes: INTERNAL,
  dtrarityhelp: INTERNAL,
  dtdifficultyrewardtable: INTERNAL,
  dtdifficultyhelp: INTERNAL,
  dttagsinternal: INTERNAL,

  unitskillcard: INTERNAL,
  partycard: INTERNAL,
  activitycard: INTERNAL,
  roominstancecard: INTERNAL,
  roomtemplatecard: INTERNAL,
  teamcardcompact: INTERNAL,
  slaveordercardcompact: INTERNAL,
  partycardcompact: INTERNAL,
  contactcardcompact: INTERNAL,
  dutycardcompact: INTERNAL,
  loadinteractioncommon: INTERNAL,
  bantercarddetails: INTERNAL,
  bantercard: INTERNAL,
  bedchambercard: INTERNAL,
  bedchambercardkey: INTERNAL,
  buildingcardupgradelink: INTERNAL,
  buildingcardcompact: INTERNAL,
  buildingcard: INTERNAL,
  buildingcardkey: INTERNAL,
  buildingtemplatecardbuildlink: INTERNAL,
  buildingtemplatecardload: INTERNAL,
  buildingtemplatecardcompact: INTERNAL,
  buildingtemplatecard: INTERNAL,
  buildingtemplatecardkey: INTERNAL,
  companycard: INTERNAL,
  companycardcompact: INTERNAL,
  companycardkey: INTERNAL,
  contactcard: INTERNAL,
  contactcardkey: INTERNAL,
  costcard: INTERNAL,
  requirementcard: INTERNAL,
  criteriacard: INTERNAL,
  criteriatraitlist: INTERNAL,
  dutycard: INTERNAL,
  dutycardkey: INTERNAL,
  equipmentcard: INTERNAL,
  equipmentcardkey: INTERNAL,
  equipmentsetcard: INTERNAL,
  equipmentsetcardkey: INTERNAL,
  equipmentpoolcard: INTERNAL,
  equipmentpoolcardkey: INTERNAL,
  loadimage: INTERNAL,
  loadimagecredits: INTERNAL,
  injurycardinner: INTERNAL,
  injurycard: INTERNAL,
  injurycardkey: INTERNAL,
  interactionpool: INTERNAL,
  itemcard: INTERNAL,
  itemcardkey: INTERNAL,
  itempoolcard: INTERNAL,
  itempoolcardkey: INTERNAL,
  jobcard: INTERNAL,
  notificationcard: INTERNAL,
  notificationscard: INTERNAL,
  opportunitycard: INTERNAL,
  opportunitycardkey: INTERNAL,
  questcard: INTERNAL,
  questcardkey: INTERNAL,
  questauthorcardtext: INTERNAL,
  questauthorcard: INTERNAL,
  questvarload: INTERNAL,
  selectunit: INTERNAL,
  tooltipskill: INTERNAL,
  skillcardglowkey: INTERNAL,
  slaveordercard: INTERNAL,
  slaveordercardkey: INTERNAL,
  tagcard: INTERNAL,
  teamcard: INTERNAL,
  teamcardkey: INTERNAL,
  titlecard: INTERNAL,
  titlecardkey: INTERNAL,
  tooltiptrait: INTERNAL,
  traitcard: INTERNAL,
  negtraitcard: INTERNAL,
  negtraitcardkey: INTERNAL,
  traitcardglow: INTERNAL,
  traitcardkeyglow: INTERNAL,
  unitactioncard: INTERNAL,
  unitactioncardkey: INTERNAL,
  unitactionlist: INTERNAL,
  unitcardkey: INTERNAL,
  unitdescription: INTERNAL,
  unitpoolcard: INTERNAL,
  unitpoolcardkey: INTERNAL,
  unitgroupcard: INTERNAL,
  unitgroupcardkey: INTERNAL,

  tooltipunit: INTERNAL,
  loadnotification: INTERNAL,
  loadmenutopdata: INTERNAL,
  refreshmenu: INTERNAL,
  loadmenu: INTERNAL,
});
