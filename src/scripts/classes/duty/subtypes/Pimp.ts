import type { DutyInstance } from "../DutyInstance";
import {
  DutyTemplate,
  type DutyTemplateInit,
  type DutyTemplateKey,
} from "../DutyTemplate";
import { DutyInstancePrestigeSlave } from "./PrestigeSlave";

const makeDescription = (managed_duties: DutyTemplateKey[]) => {
  return `
<p>
Grants money each week based on the prestige generated by
${managed_duties
  .slice(0, managed_duties.length - 1)
  .map((k) => `the <<rep setup.dutytemplate.${k}>>`)
  .join(", ")}
and the <<rep setup.dutytemplate.${managed_duties.at(-1)}>>
slave duties.
</p>

<p>
At the end of each week, has a chance to
grant you around <<money setup.PIMP_PRESTIGE_MULTIPLIER >> for every prestige the slaves have,
as profits from the operation of your recreation wing.
(If the chance is higher than 100%, then there is a chance that the pimp will generate even more money.)
The pimp is unable to manage too many slaves, however,
and if they have more than
<<= setup.PIMP_SLAVE_LIMIT>> slaves under their care,
they will only count the prestige of the
<<= setup.PIMP_SLAVE_LIMIT>>
most prestigious slaves out of those.
</p>
  `;
};

export class DutyTemplatePimp extends DutyTemplate {
  managed_duty_template_keys: DutyTemplateKey[];

  constructor({
    key,
    name,
    relevant_skills,
    relevant_traits,
    managed_duties,
  }: {
    key: string;
    name: string;
    relevant_skills: DutyTemplateInit["relevant_skills"];
    relevant_traits: DutyTemplateInit["relevant_traits"];
    // (Not using DutyTemplateKey[] to avoid a circular type reference)
    managed_duties: string[];
  }) {
    const managed_duties_ = managed_duties as DutyTemplateKey[];
    super({
      key: key,
      name: name,
      description: makeDescription(managed_duties_),
      type: "pimp",
      unit_restrictions: [setup.qres.Job("slaver")],
      relevant_skills: relevant_skills,
      relevant_traits: relevant_traits,
      is_can_replace_with_specialist: true,
    });
    this.managed_duty_template_keys = managed_duties_;
  }

  getManagedDutyTemplates(): DutyTemplate[] {
    return this.managed_duty_template_keys.map(
      (key) => setup.dutytemplate[key],
    );
  }

  override advanceWeek(duty_instance: DutyInstance) {
    super.advanceWeek(duty_instance);

    const proc = duty_instance.getProc();
    if (proc == "proc" || proc == "crit") {
      // compute money
      const prestiges = [];
      for (const duty_template of this.getManagedDutyTemplates()) {
        const duty = State.variables.dutylist.getDuty(duty_template);
        if (duty instanceof DutyInstancePrestigeSlave) {
          const prestige = duty.getCurrentPrestige();
          if (prestige) {
            prestiges.push(prestige);
          }
        }
      }

      prestiges.sort();
      prestiges.reverse();

      let prestige_sum = 0;
      const total = prestiges.length;
      const gained = Math.min(total, setup.PIMP_SLAVE_LIMIT);
      for (let i = 0; i < gained; ++i) {
        prestige_sum += prestiges[i];
      }

      let money = prestige_sum * setup.PIMP_PRESTIGE_MULTIPLIER;
      if (proc == "crit") {
        money *= setup.PIMP_CRIT_MULTIPLIER;
      }

      money = setup.nudgeMoney(money);

      if (money) {
        let text = `${setup.capitalize(duty_instance.repYourDutyRep())} made you <<money ${Math.round(money)}>> this week from ${gained} slave${gained > 1 ? "s" : ""}`;
        if (proc == "crit") text += `, thanks to a particularly busy week`;

        if (gained < total) {
          text += `. ${total - gained} slave${total - gained > 1 ? "s were" : " was"} left unmanaged`;
        }

        setup.notify(text);
        State.variables.company.player.addMoney(Math.round(money));
      } else if (!gained) {
        let text = `${setup.capitalize(duty_instance.repYourDutyRep())} does not currently have any slaves to manage and made zero profit this week`;
        setup.notify(text);
      }
    }
  }
}
